#   1X equivale a TRUE
#   2 equivale a FALSE
girone_ritorno_1X_2$DCstaticpredictions_1X_2=ifelse(girone_ritorno_1X_2$DCstaticpredictions_1X_2 == "1X", TRUE, FALSE)
girone_ritorno_1X_2$DCdinamicpredictions_1X_2=ifelse(girone_ritorno_1X_2$DCdinamicpredictions_1X_2 == "1X", TRUE, FALSE)
# Creo le matrici di confusione
DCstatic_conf_mat_1X_2<- confusion_matrix(targets = girone_ritorno_1X_2$FTR_target,
predictions =girone_ritorno_1X_2$DCstaticpredictions_1X_2
)
#Confusion Matrices
#Libraries to build confusion matrix
library(tibble)
library(cvms)
# Creo le matrici di confusione
DCstatic_conf_mat_1X_2<- confusion_matrix(targets = girone_ritorno_1X_2$FTR_target,
predictions =girone_ritorno_1X_2$DCstaticpredictions_1X_2
)
DCdinamic_conf_mat_1X_2<- confusion_matrix(targets =girone_ritorno_1X_2$FTR_target,
predictions =girone_ritorno_1X_2$DCdinamicpredictions_1X_2
)
source("functions/plot_confusionmatrix.R")
p3=plot_confusionmatrix(DCstatic_conf_mat_1X_2,"Dixon-Coles model (static)")
p4=plot_confusionmatrix(DCdinamic_conf_mat_1X_2,"Dixon-Coles model (dinamic)")
library(ggplot2)
p3=plot_confusionmatrix(DCstatic_conf_mat_1X_2,"Dixon-Coles model (static)")
p4=plot_confusionmatrix(DCdinamic_conf_mat_1X_2,"Dixon-Coles model (dinamic)")
(p3 + theme(plot.margin = unit(c(0,35,0,0), "pt"))) +
(p4 + theme(plot.margin = unit(c(0,35,0,0), "pt")))
source("functions/plot_confusionmatrix.R")
p3=plot_confusionmatrix(DCstatic_conf_mat_1X_2,"Dixon-Coles model (static)")
p4=plot_confusionmatrix(DCdinamic_conf_mat_1X_2,"Dixon-Coles model (dinamic)")
(p3 + theme(plot.margin = unit(c(0,35,0,0), "pt"))) +
(p4 + theme(plot.margin = unit(c(0,35,0,0), "pt")))
# Creo le matrici di confusione
DCstatic_conf_mat_1X_2<- confusion_matrix(targets = girone_ritorno_1X_2$FTR_target,
predictions =girone_ritorno_1X_2$DCstaticpredictions_1X_2
)
DCdinamic_conf_mat_1X_2<- confusion_matrix(targets =girone_ritorno_1X_2$FTR_target,
predictions =girone_ritorno_1X_2$DCdinamicpredictions_1X_2
)
source("functions/plot_confusionmatrix.R")
p3=plot_confusionmatrix(DCstatic_conf_mat_1X_2,"Dixon-Coles model (static)")
(p3 + theme(plot.margin = unit(c(0,35,0,0), "pt"))) +
(p4 + theme(plot.margin = unit(c(0,35,0,0), "pt")))
library(patchwork)
(p3 + theme(plot.margin = unit(c(0,35,0,0), "pt"))) +
(p4 + theme(plot.margin = unit(c(0,35,0,0), "pt")))
# Creo le matrici di confusione
girone_ritorno_1X_2$FTR_target
#-------------------------------------------------------------------------------
# (2) ANALISI MATRICI DI CORRELAZIONE CON RISULTATO 1X-2
#-------------------------------------------------------------------------------
girone_ritorno_1X_2<- serieA_2122[191:380,]
girone_ritorno_1X_2$DCstaticpredictions_1X_2= DC_static_predictions_1X_2
girone_ritorno_1X_2$DCdinamicpredictions_1X_2= DC_dinamic_predictions_1X_2
#Feature selections
girone_ritorno_1X_2<- girone_ritorno_1X_2[,c("FTR","DCstaticpredictions_1X_2", "DCdinamicpredictions_1X_2")]
#-------------------------------------------------------------------------------
# (2) ANALISI MATRICI DI CORRELAZIONE CON RISULTATO 1X-2
#-------------------------------------------------------------------------------
girone_ritorno_1X_2<- serieA_2122[191:380,]
girone_ritorno_1X_2$DCstaticpredictions_1X_2= DC_static_predictions_1X_2
girone_ritorno_1X_2$DCdinamicpredictions_1X_2= DC_dinamic_predictions_1X_2
#Feature selections
girone_ritorno_1X_2<- girone_ritorno_1X_2[,c("FTR","DCstaticpredictions_1X_2", "DCdinamicpredictions_1X_2")]
View(p3)
View(girone_ritorno_1X_2)
#Metto dappertutto TRUE
girone_ritorno_1X_2$FTR_target= '1X'
# False quando FTR=A
girone_ritorno_1X_2$FTR_target[girone_ritorno_1X_2$FTR == 'A']= '2'
DCstatic_conf_mat_1X_2<- confusion_matrix(targets = girone_ritorno_1X_2$FTR_target,
predictions =girone_ritorno_1X_2$DCstaticpredictions_1X_2
)
View(DCstatic_conf_mat_1X_2)
p3=plot_confusionmatrix(DCstatic_conf_mat_1X_2,"Dixon-Coles model (static)")
p3
DCstatic_conf_mat_1X_2$F1
DCstatic_conf_mat_1X_2$Table
DCstatic_conf_mat_1X_2$Sensitivity
DCdinamic_conf_mat_1X_2<- confusion_matrix(targets =girone_ritorno_1X_2$FTR_target,
predictions =girone_ritorno_1X_2$DCdinamicpredictions_1X_2
)
source("functions/plot_confusionmatrix.R")
p3=plot_confusionmatrix(DCstatic_conf_mat_1X_2,"Dixon-Coles model (static)")
p4=plot_confusionmatrix(DCdinamic_conf_mat_1X_2,"Dixon-Coles model (dinamic)")
(p3 + theme(plot.margin = unit(c(0,35,0,0), "pt"))) +
(p4 + theme(plot.margin = unit(c(0,35,0,0), "pt")))
DCstatic_conf_mat_1X_2$`Pos Pred Value`
#...............................................................................
# Libraries
source("functions/team_dummies.R")
source("functions/add_date_difference.R")
source("functions/DixonColes_tau.R")
source("functions/DC_relist_params.R")
source("functions/DC_loglike_time.R")
source("functions/DC_conj_prob.R")
source("functions/Maher_conj_prob.R")
source("functions/DC_result_probs.R")
source("functions/Maher_result_probs.R")
source("functions/result_pred.R")
source("functions/result_1X_2.R")
source("functions/result_1_X2.R")
#...............................................................................
#...............................................................................
# Data import and selection
serieA_2122<- read.csv("../data/serieA_21-22.csv")
serieA_2122<- serieA_2122[,c("HomeTeam", "AwayTeam", "FTHG", "FTAG", "FTR","Date")]
teams <- names(table(serieA_2122[,"HomeTeam"]))
serieA_2122<- team_dummies(serieA_2122)
#...............................................................................
#-----------------------
# STATIC DC PREDICTIONS
#-----------------------
DC_static_predictions_HDA<- vector(mode="character",length=190)
DC_static_predictions_1X_2<- vector(mode="character",length=190)
DC_static_predictions_1_X2<- vector(mode="character",length=190)
i=1
for (match in 20:38){
#test set for the current matchday
current_testset=serieA_2122[(10*match -9):(10*match),]
#load parameters estimated for the current matchday
filepath= paste("parameters/eps/par_list_",match,".RData",sep="")
load(filepath)
# The object loaded is called  "par_list"
current_eps_par=par_list[1:4]
current_matchday_predictions_HDA<- vector(mode="character",length=10)
current_matchday_predictions_1X_2<- vector(mode="character",length=10)
current_matchday_predictions_1_X2<- vector(mode="character",length=10)
for (m in 1:nrow(current_testset)){
# Get match teams
teamA= current_testset[m,"HomeTeam"]
teamB= current_testset[m,"AwayTeam"]
# Get the real result of the match
real_result= current_testset[m,"FTR"]
# Get probabilities H-D-A
HDA_probs=DC_result_probs(teamA,teamB,current_eps_par)
#Predict H-D-A, 1X-2 and 1-X2
predicted_FTR=  result_pred(HDA_probs)
predicted_1X_2=  result_1X_2(HDA_probs)
predicted_1_X2=  result_1_X2(HDA_probs)
#Insert predictions into array
current_matchday_predictions_HDA[m]=predicted_FTR
current_matchday_predictions_1X_2[m]=predicted_1X_2
current_matchday_predictions_1_X2[m]=predicted_1_X2
}
# Inserisco previsioni giornata su vettore previsioni
DC_static_predictions_HDA[i:(i+9)]<-current_matchday_predictions_HDA
DC_static_predictions_1X_2[i:(i+9)]<-current_matchday_predictions_1X_2
DC_static_predictions_1_X2[i:(i+9)]<-current_matchday_predictions_1_X2
# Aggiorno l'indice
i=i+10
}
#-----------------------
# DINAMIC DC PREDICTIONS
#-----------------------
DC_dinamic_predictions_HDA<- vector(mode="character",length=190)
DC_dinamic_predictions_1X_2<- vector(mode="character",length=190)
DC_dinamic_predictions_1_X2<- vector(mode="character",length=190)
i=1
for (match in 20:38){
#test set for the current matchday
current_testset=serieA_2122[(10*match -9):(10*match),]
#load parameters estimated for the current matchday
filepath= paste("parameters/eps/par_list_",match,".RData",sep="")
load(filepath)
# The object loaded is called  "par_list"
current_eps_par=par_list[21:24]
current_matchday_predictions_HDA<- vector(mode="character",length=10)
current_matchday_predictions_1X_2<- vector(mode="character",length=10)
current_matchday_predictions_1_X2<- vector(mode="character",length=10)
for (m in 1:nrow(current_testset)){
# Get match teams
teamA= current_testset[m,"HomeTeam"]
teamB= current_testset[m,"AwayTeam"]
# Get the real result of the match
real_result= current_testset[m,"FTR"]
# Get probabilities H-D-A
HDA_probs=DC_result_probs(teamA,teamB,current_eps_par)
#Predict H-D-A, 1X-2 and 1-X2
predicted_FTR=  result_pred(HDA_probs)
predicted_1X_2=  result_1X_2(HDA_probs)
predicted_1_X2=  result_1_X2(HDA_probs)
#Insert predictions into array
current_matchday_predictions_HDA[m]=predicted_FTR
current_matchday_predictions_1X_2[m]=predicted_1X_2
current_matchday_predictions_1_X2[m]=predicted_1_X2
}
# Inserisco previsioni giornata su vettore previsioni
DC_dinamic_predictions_HDA[i:(i+9)]<-current_matchday_predictions_HDA
DC_dinamic_predictions_1X_2[i:(i+9)]<-current_matchday_predictions_1X_2
DC_dinamic_predictions_1_X2[i:(i+9)]<-current_matchday_predictions_1_X2
# Aggiorno l'indice
i=i+10
}
#-------------------------------------------------------------------------------
# (1) ANALISI MATRICI DI CORRELAZIONE CON RISULTATO H-D-A
#-------------------------------------------------------------------------------
girone_ritorno_HDA<- serieA_2122[191:380,]
girone_ritorno_HDA$DCstaticpredictions= DC_static_predictions_HDA
girone_ritorno_HDA$DCdinamicpredictions= DC_dinamic_predictions_HDA
#Feature selections
girone_ritorno_HDA<- girone_ritorno_HDA[,c("FTR","DCstaticpredictions", "DCdinamicpredictions")]
#Confusion Matrices
#Libraries to build confusion matrix
library(tibble)
library(cvms)
multinomial_metrics(all = FALSE, balanced_accuracy = TRUE)
DCstatic_conf_mat_HDA<- confusion_matrix(targets = as.factor(girone_ritorno_HDA$FTR),
predictions =as.factor(girone_ritorno_HDA$DCstaticpredictions)
)
DCdinamic_conf_mat_HDA<- confusion_matrix(targets = as.factor(girone_ritorno_HDA$FTR),
predictions =as.factor(girone_ritorno_HDA$DCdinamicpredictions)
)
#Libraries to plot them
library(ggplot2)
source("functions/plot_confusionmatrix.R")
p1=plot_confusionmatrix(DCstatic_conf_mat_HDA,"Dixon-Coles model (static)")
p2=plot_confusionmatrix(DCdinamic_conf_mat_HDA,"Dixon-Coles model (dinamic)")
library(patchwork)
p1 + theme(plot.margin = unit(c(0,40,0,0), "pt")) +
(p2 + theme(plot.margin = unit(c(0,40,0,0), "pt")))
#-------------------------------------------------------------------------------
# (2) ANALISI MATRICI DI CORRELAZIONE CON RISULTATO 1X-2
#-------------------------------------------------------------------------------
girone_ritorno_1X_2<- serieA_2122[191:380,]
girone_ritorno_1X_2$DCstaticpredictions_1X_2= DC_static_predictions_1X_2
girone_ritorno_1X_2$DCdinamicpredictions_1X_2= DC_dinamic_predictions_1X_2
#Feature selections
girone_ritorno_1X_2<- girone_ritorno_1X_2[,c("FTR","DCstaticpredictions_1X_2", "DCdinamicpredictions_1X_2")]
#in questo modo però FTR ha 3 modalità mentre le previsioni solo 2 modalità
# PERÒ SI PUO CONSIDERARE UN PROBLEMA EQUIVALENTE PIÙ SEMPLICE DA IMPLEMENTARE
# Consideriamo l'evento "Squadra di Casa non Perdere"
# Per ogni partita potrò stabilire se
#   TRUE: la squadra di casa non perde (FTR=H oppure FTR=D)
#   FALSE: la squadra di casa perde (FTR=A)
#Metto dappertutto TRUE
girone_ritorno_1X_2$FTR_target= TRUE
# False quando FTR=A
girone_ritorno_1X_2$FTR_target[girone_ritorno_1X_2$FTR == 'A']= FALSE
#Adesso devo modificare le previsioni dei modelli. Come?
#   1X equivale a TRUE
#   2 equivale a FALSE
girone_ritorno_1X_2$DCstaticpredictions_1X_2=ifelse(girone_ritorno_1X_2$DCstaticpredictions_1X_2 == "1X", TRUE, FALSE)
girone_ritorno_1X_2$DCdinamicpredictions_1X_2=ifelse(girone_ritorno_1X_2$DCdinamicpredictions_1X_2 == "1X", TRUE, FALSE)
# Creo le matrici di confusione
DCstatic_conf_mat_1X_2<- confusion_matrix(targets = girone_ritorno_1X_2$FTR_target,
predictions =girone_ritorno_1X_2$DCstaticpredictions_1X_2
)
DCdinamic_conf_mat_1X_2<- confusion_matrix(targets =girone_ritorno_1X_2$FTR_target,
predictions =girone_ritorno_1X_2$DCdinamicpredictions_1X_2
)
source("functions/plot_confusionmatrix.R")
p3=plot_confusionmatrix(DCstatic_conf_mat_1X_2,"Dixon-Coles model (static)")
p4=plot_confusionmatrix(DCdinamic_conf_mat_1X_2,"Dixon-Coles model (dinamic)")
(p3 + theme(plot.margin = unit(c(0,35,0,0), "pt"))) +
(p4 + theme(plot.margin = unit(c(0,35,0,0), "pt")))
#-------------------------------------------------------------------------------
# (3) ANALISI MATRICI DI CORRELAZIONE CON RISULTATO 1-X2
#-------------------------------------------------------------------------------
girone_ritorno_1_X2<- serieA_2122[191:380,]
girone_ritorno_1_X2$DCstaticpredictions_1_X2= DC_static_predictions_1_X2
girone_ritorno_1_X2$DCdinamicpredictions_1_X2= DC_dinamic_predictions_1_X2
#Feature selections
girone_ritorno_1_X2<- girone_ritorno_1_X2[,c("FTR","DCstaticpredictions_1_X2", "DCdinamicpredictions_1_X2")]
# Consideriamo l'evento "Squadra di Casa Vincee"
# Per ogni partita potrò stabilire se
#   TRUE: la squadra di casa vince (FTR=H)
#   FALSE: la squadra di casa non vince (FTR=D o FTR=A)
#Metto dappertutto FALSE
girone_ritorno_1_X2$FTR_target= FALSE
# TRUE quando FTR=H
girone_ritorno_1_X2$FTR_target[girone_ritorno_1_X2$FTR == 'H']= TRUE
#Adesso devo modificare le previsioni dei modelli. Come?
#   1 equivale a TRUE
#   X2 equivale a FALSE
girone_ritorno_1_X2$DCstaticpredictions_1_X2=ifelse(girone_ritorno_1_X2$DCstaticpredictions_1_X2 == "1", TRUE, FALSE)
girone_ritorno_1_X2$DCdinamicpredictions_1_X2=ifelse(girone_ritorno_1_X2$DCdinamicpredictions_1_X2 == "1", TRUE, FALSE)
# Creo le matrici di confusione
DCstatic_conf_mat_1_X2<- confusion_matrix(targets = girone_ritorno_1_X2$FTR_target,
predictions =girone_ritorno_1_X2$DCstaticpredictions_1_X2
)
DCdinamic_conf_mat_1_X2<- confusion_matrix(targets =girone_ritorno_1_X2$FTR_target,
predictions =girone_ritorno_1_X2$DCdinamicpredictions_1_X2
)
source("functions/plot_confusionmatrix.R")
p4=plot_confusionmatrix(DCstatic_conf_mat_1_X2,"Dixon-Coles model (static)")
p5=plot_confusionmatrix(DCdinamic_conf_mat_1_X2,"Dixon-Coles model (dinamic)")
(p4 + theme(plot.margin = unit(c(0,35,0,0), "pt"))) +
(p5 + theme(plot.margin = unit(c(0,35,0,0), "pt")))
#-------------------------------------------------------------------------------
# (2) ANALISI MATRICI DI CORRELAZIONE CON RISULTATO 1X-2
#-------------------------------------------------------------------------------
girone_ritorno_1X_2<- serieA_2122[191:380,]
girone_ritorno_1X_2$DCstaticpredictions_1X_2= DC_static_predictions_1X_2
girone_ritorno_1X_2$DCdinamicpredictions_1X_2= DC_dinamic_predictions_1X_2
#Feature selections
girone_ritorno_1X_2<- girone_ritorno_1X_2[,c("FTR","DCstaticpredictions_1X_2", "DCdinamicpredictions_1X_2")]
#Metto dappertutto TRUE
girone_ritorno_1X_2$FTR_target= '1X'
# False quando FTR=A
girone_ritorno_1X_2$FTR_target[girone_ritorno_1X_2$FTR == 'A']= '2'
# Creo le matrici di confusione
DCstatic_conf_mat_1X_2<- confusion_matrix(targets = as.factor(girone_ritorno_1X_2$FTR_target),
predictions =as.factor(girone_ritorno_1X_2$DCstaticpredictions_1X_2)
)
p3=plot_confusionmatrix(DCstatic_conf_mat_1X_2,"Dixon-Coles model (static)")
p3
DCstatic_conf_mat_1X_2$Sensitivity
DCstatic_conf_mat_1X_2$`Pos Pred Value`
View(girone_ritorno_1X_2)
#-------------------------------------------------------------------------------
# (3) ANALISI MATRICI DI CORRELAZIONE CON RISULTATO 1-X2
#-------------------------------------------------------------------------------
girone_ritorno_1_X2<- serieA_2122[191:380,]
girone_ritorno_1_X2$DCstaticpredictions_1_X2= DC_static_predictions_1_X2
setwd("~/thesis/code")
# (4) ANALISI MATRICI DI CORRELAZIONE CON RISULTATO 1-X2
#-------------------------------------------------------------------------------
girone_ritorno_1_X2<- serieA_2122[191:380,]
# Libraries
source("functions/team_dummies.R")
source("functions/add_date_difference.R")
source("functions/DixonColes_tau.R")
source("functions/DC_relist_params.R")
source("functions/DC_loglike_time.R")
source("functions/DC_conj_prob.R")
source("functions/Maher_conj_prob.R")
source("functions/DC_result_probs.R")
source("functions/Maher_result_probs.R")
source("functions/result_pred.R")
source("functions/result_1X_2.R")
source("functions/result_1_X2.R")
# Data import and selection
serieA_2122<- read.csv("../data/serieA_21-22.csv")
serieA_2122<- serieA_2122[,c("HomeTeam", "AwayTeam", "FTHG", "FTAG", "FTR","Date")]
teams <- names(table(serieA_2122[,"HomeTeam"]))
serieA_2122<- team_dummies(serieA_2122)
#............................................
#-----------------------
# STATIC DC PREDICTIONS
#-----------------------
DC_static_predictions_HDA<- vector(mode="character",length=190)
DC_static_predictions_1X_2<- vector(mode="character",length=190)
DC_static_predictions_1_X2<- vector(mode="character",length=190)
i=1
for (match in 20:38){
#test set for the current matchday
current_testset=serieA_2122[(10*match -9):(10*match),]
#load parameters estimated for the current matchday
filepath= paste("parameters/eps/par_list_",match,".RData",sep="")
load(filepath)
# The object loaded is called  "par_list"
current_eps_par=par_list[1:4]
current_matchday_predictions_HDA<- vector(mode="character",length=10)
current_matchday_predictions_1X_2<- vector(mode="character",length=10)
current_matchday_predictions_1_X2<- vector(mode="character",length=10)
for (m in 1:nrow(current_testset)){
# Get match teams
teamA= current_testset[m,"HomeTeam"]
teamB= current_testset[m,"AwayTeam"]
# Get the real result of the match
real_result= current_testset[m,"FTR"]
# Get probabilities H-D-A
HDA_probs=DC_result_probs(teamA,teamB,current_eps_par)
#Predict H-D-A, 1X-2 and 1-X2
predicted_FTR=  result_pred(HDA_probs)
predicted_1X_2=  result_1X_2(HDA_probs)
predicted_1_X2=  result_1_X2(HDA_probs)
#Insert predictions into array
current_matchday_predictions_HDA[m]=predicted_FTR
current_matchday_predictions_1X_2[m]=predicted_1X_2
current_matchday_predictions_1_X2[m]=predicted_1_X2
}
# Inserisco previsioni giornata su vettore previsioni
DC_static_predictions_HDA[i:(i+9)]<-current_matchday_predictions_HDA
DC_static_predictions_1X_2[i:(i+9)]<-current_matchday_predictions_1X_2
DC_static_predictions_1_X2[i:(i+9)]<-current_matchday_predictions_1_X2
# Aggiorno l'indice
i=i+10
}
#-----------------------
# DINAMIC DC PREDICTIONS
#-----------------------
DC_dinamic_predictions_HDA<- vector(mode="character",length=190)
DC_dinamic_predictions_1X_2<- vector(mode="character",length=190)
DC_dinamic_predictions_1_X2<- vector(mode="character",length=190)
i=1
for (match in 20:38){
#test set for the current matchday
current_testset=serieA_2122[(10*match -9):(10*match),]
#load parameters estimated for the current matchday
filepath= paste("parameters/eps/par_list_",match,".RData",sep="")
load(filepath)
# The object loaded is called  "par_list"
current_eps_par=par_list[21:24]
current_matchday_predictions_HDA<- vector(mode="character",length=10)
current_matchday_predictions_1X_2<- vector(mode="character",length=10)
current_matchday_predictions_1_X2<- vector(mode="character",length=10)
for (m in 1:nrow(current_testset)){
# Get match teams
teamA= current_testset[m,"HomeTeam"]
teamB= current_testset[m,"AwayTeam"]
# Get the real result of the match
real_result= current_testset[m,"FTR"]
# Get probabilities H-D-A
HDA_probs=DC_result_probs(teamA,teamB,current_eps_par)
#Predict H-D-A, 1X-2 and 1-X2
predicted_FTR=  result_pred(HDA_probs)
predicted_1X_2=  result_1X_2(HDA_probs)
predicted_1_X2=  result_1_X2(HDA_probs)
#Insert predictions into array
current_matchday_predictions_HDA[m]=predicted_FTR
current_matchday_predictions_1X_2[m]=predicted_1X_2
current_matchday_predictions_1_X2[m]=predicted_1_X2
}
# Inserisco previsioni giornata su vettore previsioni
DC_dinamic_predictions_HDA[i:(i+9)]<-current_matchday_predictions_HDA
DC_dinamic_predictions_1X_2[i:(i+9)]<-current_matchday_predictions_1X_2
DC_dinamic_predictions_1_X2[i:(i+9)]<-current_matchday_predictions_1_X2
# Aggiorno l'indice
i=i+10
}
# (4) ANALISI MATRICI DI CORRELAZIONE CON RISULTATO 1-X2
#-------------------------------------------------------------------------------
girone_ritorno_1_X2<- serieA_2122[191:380,]
girone_ritorno_1_X2$DCstaticpredictions_1_X2= DC_static_predictions_1_X2
girone_ritorno_1_X2$DCdinamicpredictions_1_X2= DC_dinamic_predictions_1_X2
#Feature selections
girone_ritorno_1_X2<- girone_ritorno_1_X2[,c("FTR","DCstaticpredictions_1_X2", "DCdinamicpredictions_1_X2")]
View(girone_ritorno_1_X2)
#Metto dappertutto FALSE
girone_ritorno_1_X2$FTR_target= TRUE
# TRUE quando FTR=H
girone_ritorno_1_X2$FTR_target[girone_ritorno_1_X2$FTR == 'H']= FALSE
#Adesso devo modificare le previsioni dei modelli. Come?
#   1 equivale a TRUE
#   X2 equivale a FALSE
girone_ritorno_1_X2$DCstaticpredictions_1_X2=ifelse(girone_ritorno_1_X2$DCstaticpredictions_1_X2 == "X2", TRUE, FALSE)
girone_ritorno_1_X2$DCdinamicpredictions_1_X2=ifelse(girone_ritorno_1_X2$DCdinamicpredictions_1_X2 == "X2", TRUE, FALSE)
#Confusion Matrices
#Libraries to build confusion matrix
library(tibble)
library(cvms)
#Libraries to plot them
library(ggplot2)
source("functions/plot_confusionmatrix.R")
library(patchwork)
# Creo le matrici di confusione
DCstatic_conf_mat_1_X2<- confusion_matrix(targets = girone_ritorno_1_X2$FTR_target,
predictions =girone_ritorno_1_X2$DCstaticpredictions_1_X2
)
DCdinamic_conf_mat_1_X2<- confusion_matrix(targets =girone_ritorno_1_X2$FTR_target,
predictions =girone_ritorno_1_X2$DCdinamicpredictions_1_X2
)
p4=plot_confusionmatrix(DCstatic_conf_mat_1_X2,"Dixon-Coles model (static)")
p5=plot_confusionmatrix(DCdinamic_conf_mat_1_X2,"Dixon-Coles model (dinamic)")
(p4 + theme(plot.margin = unit(c(0,35,0,0), "pt"))) +
(p5 + theme(plot.margin = unit(c(0,35,0,0), "pt")))
DCstatic_conf_mat_1_X2$`Positive Class`
DCstatic_conf_mat_1_X2$`Pos Pred Value`
DCstatic_conf_mat_1_X2$`Neg Pred Value`
DCstatic_conf_mat_1_X2$Sensitivity
DCstatic_conf_mat_1_X2$`Balanced Accuracy`
DCstatic_conf_mat_1_X2$F1
DCstatic_conf_mat_1_X2$`Pos Pred Value`
DCstatic_conf_mat_1_X2$`Neg Pred Value`
DCstatic_conf_mat_1_X2$Sensitivity
DCdinamic_conf_mat_1_X2$Sensitivity
DCstatic_conf_mat_1_X2$F1
DCdinamic_conf_mat_1_X2$F1
setwd("~/Bsc thesis")
#-------------------------------------------------------------------------------
# Import serie A 21-22 data
serieA_2122<- read.csv("../data/serieA_21-22.csv")
#-------------------------------------------------------------------------------
# Import serie A 21-22 data
serieA_2122<- read.csv("data/serieA_21-22.csv")
# Feature selection
serieA_2122<- serieA_2122[,c("HomeTeam", "AwayTeam", "FTHG", "FTAG", "FTR")]
# Create team dummies
source("functions/team_dummies.R")
serieA_2122<- team_dummies(serieA_2122)
# Get teams's name
teams<- names(table(serieA_2122[,"HomeTeam"]))
# Import Maher loglike
source("functions/Maher_loglike.R")
# Initial guess
parameters_guess= rep(0.5,40)#both attack and defense parameters (tot= 2n)
# Optimization
maherparams <- optim(parameters_guess, Maher_loglike,
data=serieA_2122)$par
# Import Maher loglike
source("functions/Maher_loglike.R")
# Initial guess
parameters_guess= rep(0.5,40)#both attack and defense parameters (tot= 2n)
# Optimization
maherparams <- optim(parameters_guess, Maher_loglike,
data=serieA_2122)$par
names(maherparams) <- rep(teams,2)
maherparams<- list(
att= params[1:20],
def= params[21:40]
)
maherparams<- list(
att= maherparams[1:20],
def= maherparams[21:40]
)
maherparams$att
load("/home/giuliofantuzzi/Bsc thesis/parameters/maherparams.RData")
View(maherparams)
load("parameters/maherparams.RData")
View(maherparams)
